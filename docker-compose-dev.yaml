services:
  database:
    image: postgres:14
    container_name: database
    environment:
      POSTGRES_USER: docker
      POSTGRES_PASSWORD: docker
      POSTGRES_DB: docker_db
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - starburger_net
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U", "docker"]
      interval: 5s
      timeout: 5s
      retries: 3 

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: backend
    environment:
      POSTGRES_HOST: database
    volumes:
      - ./media:/media
      - ./backend:/app
      - ./frontend/assets:/app/assets
      - ./frontend/bundles:/app/bundles
    working_dir: /app
    env_file:
      - ./backend/star_burger/.env
    ports:
      - "8000:8000"
    networks:
      - starburger_net
    restart: unless-stopped
    command: >-
      sh -c "
      python manage.py migrate --noinput &&
      python manage.py loaddata db_data.json &&
      python manage.py collectstatic --noinput &&
      python manage.py runserver 0.0.0.0:8000
      "
    healthcheck:
      test: ["CMD-SHELL", "python manage.py check"]
      interval: 10s
      timeout: 5s
      retries: 5
    
    depends_on:
      database:
        condition: service_healthy


  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: frontend
    volumes:               
      - ./frontend/bundles:/app/bundles
    working_dir: /app
    networks:
      - starburger_net
    depends_on:
      database:
        condition: service_healthy


volumes:
  postgres:
    name: postgres

networks:
  starburger_net:
    name: starburger_net